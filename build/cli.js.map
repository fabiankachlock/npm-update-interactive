{"version":3,"file":"cli.js","sources":["../src/package.ts","../src/ui.ts","../src/versions.ts","../src/bin/cli.ts"],"sourcesContent":["import fs from 'node:fs'\nimport { readFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { Dependency } from './types'\n\nexport const findProjectPackageJson = (givenPath?: string): string | undefined => {\n  let currentPath = givenPath ?? path.join(process.cwd(), 'package.json')\n  while (currentPath) {\n    if (fs.existsSync(currentPath)) {\n      return currentPath\n    }\n    const newPath = path.normalize(path.join(path.dirname(currentPath), '..'))\n    if (newPath === currentPath) {\n      // reached the root directory\n      return undefined\n    }\n    currentPath = newPath\n  }\n}\n\nexport const findDependencyPackageJson = (packageJsonPath: string, dependencyName: string): string | undefined => {\n  const projectRoot = path.join(path.dirname(packageJsonPath), 'node_modules')\n  const localPath = path.join(process.cwd(), 'node_modules')\n  const requirePath = require.resolve.paths(dependencyName) ?? []\n  const allPaths = [...requirePath, projectRoot, localPath]\n\n  for (const basePath of allPaths) {\n    const packageJsonPath = path.join(basePath, dependencyName, 'package.json')\n    if (fs.existsSync(packageJsonPath)) {\n      return packageJsonPath\n    }\n  }\n  return undefined\n}\n\nexport const findePackageManager = async (packageJsonPath: string): Promise<string> => {\n  try {\n    const packageJson = await readFile(packageJsonPath, 'utf-8')\n    const { packageManager } = JSON.parse(packageJson)\n    if (packageManager) {\n      const [name] = packageManager.split('@')\n      return name\n    }\n    const projectRoot = path.dirname(packageJsonPath)\n    if (fs.existsSync(path.join(projectRoot, 'pnpm-lock.yaml'))) {\n      return 'pnpm'\n    } else if (fs.existsSync(path.join(projectRoot, 'yarn.lock'))) {\n      return 'yarn'\n    } else if (fs.existsSync(path.join(projectRoot, 'package-lock.json'))) {\n      return 'npm'\n    }\n  } catch {}\n  return 'npm'\n}\n\nexport const getDependencies = async (packageJsonPath: string): Promise<Dependency[]> => {\n  const packageJson = await readFile(packageJsonPath, 'utf-8')\n\n  const { dependencies = {}, devDependencies = {} } = JSON.parse(packageJson)\n  const dependenciesAndVersions = Object.entries(dependencies)\n    .concat(Object.entries(devDependencies))\n    .map(([name, version]) => {\n      try {\n        const dependencyPackageJsonPath = findDependencyPackageJson(packageJsonPath, name)\n        if (!dependencyPackageJsonPath) return undefined\n\n        return new Promise<Dependency>(async (resolve, reject) => {\n          const dependencyPackage = await readFile(dependencyPackageJsonPath, 'utf-8')\n          resolve({\n            name,\n            version: version as string,\n            installedVersion: JSON.parse(dependencyPackage ?? '').version,\n          })\n        })\n      } catch {\n        return {\n          name,\n          version: version as string,\n        } as Dependency\n      }\n    })\n\n  return Promise.all(dependenciesAndVersions.filter(Boolean) as Promise<Dependency>[])\n}\n","import promps from 'prompts-ncu'\nimport { Dependency, PackageUpdate } from './types'\n\nexport const getPackageToUpdate = async (dependencies: Dependency[]): Promise<string[]> => {\n  const { packages } = await promps({\n    type: 'autocompleteMultiselect',\n    name: 'packages',\n    message: 'Select packages to update',\n    choices: dependencies.map(dependency => ({\n      title: `${dependency.name}@${dependency.version} (${dependency.installedVersion})`,\n      value: dependency.name,\n    })),\n  })\n  return packages\n}\n\nexport const getNewPackageVersion = async (\n  packageName: string,\n  availableVersions: string[],\n): Promise<string | undefined> => {\n  const { version } = await promps({\n    type: 'autocomplete',\n    name: 'version',\n    hint: 'Select skip to skip updating this package.',\n    message: `Select a new version for '${packageName}'`,\n    choices: availableVersions\n      .map(version => ({\n        title: version,\n        value: version,\n      }))\n      .concat({\n        title: 'Skip',\n        value: '##skip',\n      }),\n  })\n\n  if (version === '##skip') {\n    return undefined\n  }\n  return version\n}\n\nexport const getNextStep = async (updates: PackageUpdate[]): Promise<'update' | 'select' | 'abort'> => {\n  const { nextStep } = await promps({\n    type: 'select',\n    name: 'nextStep',\n    message: 'What do you want to do next?',\n    choices: [\n      { title: 'Update packages', value: 'update' },\n      { title: 'Select more packages', value: 'select' },\n      { title: 'Abort', value: 'abort' },\n    ],\n  })\n  return nextStep\n}\n","import { exec } from 'child_process'\nimport semver from 'semver'\n\nexport const getAvailableVersions = (packageName: string, packageManager: string): Promise<string[]> => {\n  // yarn uses the `info`, while npm and pnpm use `view` command to get package information.\n  const action = packageManager === 'yarn' ? 'info' : 'view'\n  // explicitly ask the package manager to return the versions in JSON format\n  const command = `${packageManager} ${action} ${packageName} versions --json`\n  const { promise, resolve, reject } = Promise.withResolvers<string[]>()\n\n  exec(\n    command,\n    {\n      encoding: 'utf-8',\n    },\n    (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      }\n\n      const version: string[] = JSON.parse(stdout)\n      const sortedVersions = semver.rsort(version)\n      resolve(sortedVersions)\n    },\n  )\n\n  return promise\n}\n","import { program } from 'commander'\nimport { findePackageManager, findProjectPackageJson, getDependencies } from '../package'\nimport { getNewPackageVersion, getNextStep, getPackageToUpdate } from '../ui'\nimport { Dependency, PackageUpdate } from '../types'\nimport { getAvailableVersions } from '../versions'\n;(async () => {\n  console.log('## npm-update-interactive ##')\n  program\n    .name('npm-update-interactive')\n    .description('Update npm packages interactively')\n    .version('1.0.0')\n    .option('-c, --config <path>', 'Path to the package json file', undefined)\n    .option('-p, --package-manager <name>', 'Package manager to use', undefined)\n\n  program.parse(process.argv)\n  const { config, packageManager } = program.opts()\n  const packageJsonPath = findProjectPackageJson(config)\n  if (!packageJsonPath) {\n    console.error('No package.json found')\n    process.exit(1)\n  }\n  console.log(`Using package.json: ${packageJsonPath}`)\n\n  const packageManagerName = packageManager || (await findePackageManager(packageJsonPath))\n  console.log(`Using package manager: ${packageManagerName}`)\n\n  const dependencies = await getDependencies(packageJsonPath)\n  const allUpdates = {} as Record<string, PackageUpdate>\n\n  while (true) {\n    const updates = await getPackageToUpdate(dependencies)\n    for (const dependencyName of updates) {\n      const dependency = dependencies.find(dependency => dependency.name === dependencyName)!\n      const versions = await getAvailableVersions(dependencyName, packageManagerName)\n      const newVersion = await getNewPackageVersion(dependencyName, versions)\n      if (newVersion) {\n        allUpdates[dependencyName] = {\n          dependency,\n          newVersion,\n        }\n      }\n    }\n\n    console.log('Selected packages to update:')\n    for (const [name, { dependency, newVersion }] of Object.entries(allUpdates)) {\n      console.log(`- ${name}: ${dependency.version} -> ${newVersion}`)\n    }\n\n    const nextStep = await getNextStep(Object.values(allUpdates))\n    if (nextStep === 'abort') {\n      console.log('Aborting...')\n      process.exit(0)\n    }\n\n    if (nextStep === 'update') {\n      break\n    }\n  }\n\n  console.log('Updating packages...')\n})()\n"],"names":["findProjectPackageJson","givenPath","currentPath","path","fs","newPath","findDependencyPackageJson","packageJsonPath","dependencyName","projectRoot","localPath","allPaths","basePath","findePackageManager","packageJson","readFile","packageManager","name","getDependencies","dependencies","devDependencies","dependenciesAndVersions","version","dependencyPackageJsonPath","resolve","reject","dependencyPackage","getPackageToUpdate","packages","promps","dependency","getNewPackageVersion","packageName","availableVersions","getNextStep","updates","nextStep","getAvailableVersions","command","promise","exec","error","stdout","stderr","sortedVersions","semver","program","config","packageManagerName","allUpdates","versions","newVersion"],"mappings":"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"}